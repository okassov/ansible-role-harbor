---

- name: 'install | Install prerequisit packages'
  apt:
    name: python3-pip
    state: present
    update_cache: yes

- name: 'install | Installing docker python bindings'
  become: true
  pip:
    state: present
    name:
      - docker
      - pyyaml>=3.11
      - docker-compose>=1.7.0

- name: 'install | Checking if Harbor is already installed'
  stat:
    path: "{{ harbor_install_dir }}/harbor"
  register: harbor_folder_st

- name: 'install | Downloading Harbor {{ harbor_version }} (offline installer)'
  get_url: 
    url: "{{ harbor_url }}"
    dest: "/tmp/harbor.tgz"
    validate_certs: no
  when:
    - not harbor_folder_st.stat.exists or (harbor_folder_st.stat.isdir is defined and not harbor_folder_st.stat.isdir)

- name: 'install | Creating Harbor directory... ({{ harbor_install_dir }}/harbor)'
  file:
    path: "{{ harbor_install_dir }}"
    state: directory
    mode: o+r
  when:
    - not harbor_folder_st.stat.exists or (harbor_folder_st.stat.isdir is defined and not harbor_folder_st.stat.isdir)

- name: 'install | Uncompressing Harbor installer...'
  unarchive:
    remote_src: True
    src: /tmp/harbor.tgz
    dest: "{{ harbor_install_dir }}"
    creates: "{{ harbor_install_dir }}/harbor"
  when:
    - not harbor_folder_st.stat.exists or (harbor_folder_st.stat.isdir is defined and not harbor_folder_st.stat.isdir)

- name: 'install | Copying over harbor.cfg'
  template:
    src: harbor.cfg.j2
    dest: "{{ harbor_install_dir }}/harbor/harbor.yml"
  when:
    - not harbor_folder_st.stat.exists or (harbor_folder_st.stat.isdir is defined and not harbor_folder_st.stat.isdir)

- name: 'install | Copying over docker-compose.yml'
  template:
    src: docker-compose.yml.j2
    dest: "{{ harbor_install_dir }}/harbor/docker-compose.yml"
  when:
    - not harbor_folder_st.stat.exists or (harbor_folder_st.stat.isdir is defined and not harbor_folder_st.stat.isdir)

- name: 'install | Copying over prepare script'
  template:
    src: prepare.j2
    dest: "{{ harbor_install_dir }}/harbor/prepare"
    mode: a+x
  when:
    - not harbor_folder_st.stat.exists or (harbor_folder_st.stat.isdir is defined and not harbor_folder_st.stat.isdir)

- name: 'install | Creating SSL certs folder'
  file:
    path: '{{ harbor_ssl_dir }}'
    state: directory
  when:
    - not harbor_folder_st.stat.exists or (harbor_folder_st.stat.isdir is defined and not harbor_folder_st.stat.isdir)

- name: 'install | Generate self-signed cert with openssl'
  command: openssl req -newkey rsa:4096 -nodes  -sha256 -keyout '{{ harbor_ssl_cert_key }}' -subj '{{ harbor_ssl_self_subject }}' -new  -x509 -days '{{ harbor_ssl_self_days }}' -out '{{ harbor_ssl_cert }}'
  args:
    creates: '{{ harbor_ssl_cert }}' # don't write over a cert
  when:
    - (not harbor_folder_st.stat.exists or (harbor_folder_st.stat.isdir is defined and not harbor_folder_st.stat.isdir)) and harbor_ssl_self_signed_generate

- name: 'install | Copy Harbor SSL certificate'
  template:
    backup: yes
    src: harbor.crt.j2
    dest: "{{ harbor_ssl_dir }}/{{ harbor_hostname }}.crt"
    owner: root
    group: root
    mode: '0644'
    force: no
  when: not harbor_ssl_self_signed_generate

- name: 'install | Copy Harbor SSL certificate key'
  template:
    backup: yes
    src: harbor.key.j2
    dest: "{{ harbor_ssl_dir }}/{{ harbor_hostname }}.key"
    owner: root
    group: root
    mode: '0644'
    force: no
  when: not harbor_ssl_self_signed_generate

- name: 'install | Commenting required line on Nginx configuration if harbor_behind_proxy is set'
  replace:
    path: "{{ harbor_install_dir }}/harbor/common/templates/nginx/{{ item }}"
    regexp: '(proxy_set_header X-Forwarded-Proto \$\$scheme;)'
    replace: '# \1'
    backup: yes
  when: harbor_behind_proxy is defined and harbor_behind_proxy
  with_items:
    - "nginx.http.conf"
    - "nginx.https.conf"

- name: 'install | Running Harbor installer...'
  become: yes
  command: "./install.sh"
  args:
    chdir: "{{ harbor_install_dir }}/harbor"
    creates: '{{ harbor_install_dir }}/harbor/harbor_install_log.txt'
  when:
    - not harbor_folder_st.stat.exists or (harbor_folder_st.stat.isdir is defined and not harbor_folder_st.stat.isdir)

- name: 'install | Setting permissions on Harbor common folder...'
  file:
    dest: "{{ harbor_install_dir }}/harbor/common"
    owner: 10000
    mode: 0750
    group: docker
    recurse: yes
  when:
    - not harbor_folder_st.stat.exists or (harbor_folder_st.stat.isdir is defined and not harbor_folder_st.stat.isdir)

- name: 'install | Setting permissions on nginx folder specifically...'
  file:
    dest: "{{ harbor_install_dir }}/harbor/common/config/nginx"
    owner: 10000
    mode: o+rx
    group: docker
    recurse: yes
  when:
    - not harbor_folder_st.stat.exists or (harbor_folder_st.stat.isdir is defined and not harbor_folder_st.stat.isdir)

- name: 'install | Changing registry realm if harbor_registry_realm_protocol is different from harbor_ui_url_protocol'
  replace:
    path: "{{ harbor_install_dir }}/harbor/common/config/registry/config.yml"
    regexp: 'realm: (https|http)://(.*)'
    replace: 'realm: {{ harbor_registry_realm_protocol }}://\2'
    backup: yes
  when: harbor_behind_proxy is defined and harbor_behind_proxy and harbor_registry_realm_protocol != harbor_ui_url_protocol

- debug:
    msg: 'install | Restarting Harbor because registry configuration changed'
  when: harbor_behind_proxy is defined and harbor_behind_proxy and harbor_registry_realm_protocol != harbor_ui_url_protocol

# Restart only if we changed the registry realm
- include_tasks: restart.yaml
  when: harbor_behind_proxy is defined and harbor_behind_proxy and harbor_registry_realm_protocol != harbor_ui_url_protocol

- name: 'install | Creating projects...'
  uri:
    url: "{{ harbor_api_url }}/projects"
    method: POST
    user: "admin"
    password: "{{ harbor_admin_password }}"
    status_code:
      - 201
      - 409 # already created
    body_format: json
    force_basic_auth: yes
    return_content: yes
    body: "{{ lookup('template', 'templates/create_project.j2') }}"
  when: harbor_projects is defined
  with_items: "{{ harbor_projects }}"

- name: 'install | Creating users...'
  uri:
    url: "{{ harbor_api_url }}/users"
    method: POST
    user: "admin"
    password: "{{ harbor_admin_password }}"
    status_code:
      - 201
      - 409 # already created
    body_format: json
    force_basic_auth: yes
    return_content: yes
    body: "{{ lookup('template', 'templates/create_user.j2') }}"
  when: harbor_users is defined and harbor_self_registration == "off"
  with_items: "{{ harbor_users }}"
